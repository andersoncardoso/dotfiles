" Simpler vim confi, without plugins, to use outside Neovim
" on irb sessions for example
" Copy or symlink to ~/.vimrc

syntax enable                     " enable syntax processing

filetype plugin on                " turn on file type detection
filetype indent on                " load filetype-specific indent files

set showcmd                       " Display incomplete commands.
set noshowmode                    " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.
set nofoldenable                  " disable folding

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.

set lazyredraw                    " redraw only when we need to.
set showmatch                     " highlight matching [{()}]

set termguicolors                 " set true colors

set expandtab                     " Use spaces instead of tabs
set tabstop=2
set softtabstop=2
set shiftwidth=2
set autoindent
set smarttab
set autoread                      " auto reload file when it changes

set laststatus=2

" specific tab size
augroup configgroup
    autocmd!
    autocmd VimEnter * highlight clear SignColumn
    autocmd BufWritePre *.php,*.py,*.js,*.txt,*.hs,*.java,*.md
                \:call <SID>StripTrailingWhitespaces()
    autocmd FileType java setlocal noexpandtab
    autocmd FileType java setlocal list
    autocmd FileType java setlocal listchars=tab:+\ ,eol:-
    autocmd FileType java setlocal formatprg=par\ -w80\ -T4
    autocmd FileType php setlocal expandtab
    autocmd FileType php setlocal list
    autocmd FileType php setlocal listchars=tab:+\ ,eol:-
    autocmd FileType php setlocal formatprg=par\ -w80\ -T4
    autocmd FileType ruby setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType ruby setlocal commentstring=#\ %s
    autocmd FileType python setlocal ts=4 sts=4 sw=4 expandtab
    autocmd FileType python setlocal commentstring=#\ %s
    autocmd FileType make setlocal ts=4 sts=4 sw=4 noexpandtab
    autocmd BufEnter *.cls setlocal filetype=java
    autocmd BufEnter *.zsh-theme setlocal filetype=zsh
    autocmd BufEnter Makefile setlocal noexpandtab
    autocmd BufEnter *.sh setlocal ts=2 sts=2 sw=2
augroup END

" automatic trailing whitespace triming
autocmd BufWritePre * :%s/\s\+$//e

" Save on focus lost
au FocusLost * :wa
set autowriteall

"let mapleader=","                " leader is comma

" move to beginning/end of line
nnoremap B ^
nnoremap E $

" $/^ doesn't do anything
nnoremap $ <nop>
nnoremap ^ <nop>

" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>

" ident/unindent with tabs on visual mode
vmap >  >gv
vmap <  <gv

" Tab mappings.
if has("unix")
  let s:uname = system("uname")
  if s:uname == "Darwin\n"
    map <C-S-Left> :tabprev<CR>
    map <C-S-Right> :tabnext<CR>
    map <C-S-t> :tabnew<CR>:tabmove<CR>
  else
    map <C-Left> :tabprev<CR>
    map <C-Right> :tabnext<CR>
    map <C-t> :tabnew<CR>:tabmove<CR>
  endif
endif

" open new split pane
map <leader>ws <ESC>:sp<CR>
map <leader>wv <ESC>:vs<CR>

" navigation through panels
nmap <silent> <S-Up> :wincmd k<CR>
nmap <silent> <S-Down> :wincmd j<CR>
nmap <silent> <S-Left> :wincmd h<CR>
nmap <silent> <S-Right> :wincmd l<CR>

" paste and copy from clipboard
if has("unix")
  let s:uname = system("uname")
  if s:uname == "Darwin\n"
    set clipboard=unnamed
  else
    set clipboard=unnamedplus
  endif
endif

" convenient mappings
nnoremap <C-o> o<ESC>
nmap <space> i <ESC>

colorscheme desert

" autocomplete menu colors
highlight Pmenu guibg=#646464
highlight Pmenu guifg=#ebebeb
highlight PmenuSel guibg=#617a7a
